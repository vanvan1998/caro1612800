{"ast":null,"code":"import { connect } from 'react-redux';\nimport * as actions from '../actions/actions';\nimport Game from '../components/game';\n\nconst mapStateToProps = state => {\n  const GameState = state.GameReducer;\n  const InfoState = state.LoginReducer;\n  return {\n    history: GameState.history,\n    stepNumber: GameState.stepNumber,\n    xIsNext: GameState.xIsNext,\n    col: GameState.col,\n    row: GameState.row,\n    Sortvalue: GameState.Sortvalue,\n    temp: GameState.temp,\n    winner: GameState.winner,\n    name: state.LoginReducer.name,\n    token: state.LoginReducer.token,\n    username: InfoState.username,\n    password: InfoState.password,\n    isInfo: GameState.isInfo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleClick: (i, j) => {\n      dispatch(actions.boardClick(i, j));\n    },\n    jumpTo: step => {\n      dispatch(actions.goToMoveClick(step));\n    },\n    sortClick: () => {\n      dispatch(actions.sortClick());\n    },\n    calculateWinner: squares => {\n      dispatch(actions.checkWinner(squares));\n    },\n    Logout: () => {\n      dispatch(actions.LogOut());\n    },\n    Info: () => {\n      dispatch(actions.Info());\n    },\n    Login: (username, password) => {\n      dispatch(actions.loginRequest(username, password));\n    },\n    NoInfo: () => {\n      dispatch(actions.NoInfo());\n    }\n  };\n};\n\nconst GameContainer = connect(mapStateToProps, mapDispatchToProps)(Game);\nexport default GameContainer;","map":{"version":3,"sources":["D:/react/caro1612800/src/containers/game.container.js"],"names":["connect","actions","Game","mapStateToProps","state","GameState","GameReducer","InfoState","LoginReducer","history","stepNumber","xIsNext","col","row","Sortvalue","temp","winner","name","token","username","password","isInfo","mapDispatchToProps","dispatch","handleClick","i","j","boardClick","jumpTo","step","goToMoveClick","sortClick","calculateWinner","squares","checkWinner","Logout","LogOut","Info","Login","loginRequest","NoInfo","GameContainer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAMC,SAAS,GAAGD,KAAK,CAACE,WAAxB;AACA,QAAMC,SAAS,GAAGH,KAAK,CAACI,YAAxB;AACA,SAAO;AACLC,IAAAA,OAAO,EAAEJ,SAAS,CAACI,OADd;AAELC,IAAAA,UAAU,EAAEL,SAAS,CAACK,UAFjB;AAGLC,IAAAA,OAAO,EAAEN,SAAS,CAACM,OAHd;AAILC,IAAAA,GAAG,EAAEP,SAAS,CAACO,GAJV;AAKLC,IAAAA,GAAG,EAAER,SAAS,CAACQ,GALV;AAMLC,IAAAA,SAAS,EAAET,SAAS,CAACS,SANhB;AAOLC,IAAAA,IAAI,EAAEV,SAAS,CAACU,IAPX;AAQLC,IAAAA,MAAM,EAAEX,SAAS,CAACW,MARb;AASLC,IAAAA,IAAI,EAAEb,KAAK,CAACI,YAAN,CAAmBS,IATpB;AAULC,IAAAA,KAAK,EAAEd,KAAK,CAACI,YAAN,CAAmBU,KAVrB;AAWLC,IAAAA,QAAQ,EAAEZ,SAAS,CAACY,QAXf;AAYLC,IAAAA,QAAQ,EAAEb,SAAS,CAACa,QAZf;AAaLC,IAAAA,MAAM,EAAEhB,SAAS,CAACgB;AAbb,GAAP;AAeD,CAlBD;;AAoBA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLC,IAAAA,WAAW,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrBH,MAAAA,QAAQ,CAACtB,OAAO,CAAC0B,UAAR,CAAmBF,CAAnB,EAAsBC,CAAtB,CAAD,CAAR;AACD,KAHI;AAILE,IAAAA,MAAM,EAAEC,IAAI,IAAI;AACdN,MAAAA,QAAQ,CAACtB,OAAO,CAAC6B,aAAR,CAAsBD,IAAtB,CAAD,CAAR;AACD,KANI;AAOLE,IAAAA,SAAS,EAAE,MAAM;AACfR,MAAAA,QAAQ,CAACtB,OAAO,CAAC8B,SAAR,EAAD,CAAR;AACD,KATI;AAULC,IAAAA,eAAe,EAAEC,OAAO,IAAI;AAC1BV,MAAAA,QAAQ,CAACtB,OAAO,CAACiC,WAAR,CAAoBD,OAApB,CAAD,CAAR;AACD,KAZI;AAaLE,IAAAA,MAAM,EAAE,MAAM;AACZZ,MAAAA,QAAQ,CAACtB,OAAO,CAACmC,MAAR,EAAD,CAAR;AACD,KAfI;AAgBLC,IAAAA,IAAI,EAAE,MAAM;AACVd,MAAAA,QAAQ,CAACtB,OAAO,CAACoC,IAAR,EAAD,CAAR;AACD,KAlBI;AAmBLC,IAAAA,KAAK,EAAE,CAACnB,QAAD,EAAWC,QAAX,KAAwB;AAC7BG,MAAAA,QAAQ,CAACtB,OAAO,CAACsC,YAAR,CAAqBpB,QAArB,EAA+BC,QAA/B,CAAD,CAAR;AACD,KArBI;AAsBLoB,IAAAA,MAAM,EAAE,MAAM;AACZjB,MAAAA,QAAQ,CAACtB,OAAO,CAACuC,MAAR,EAAD,CAAR;AACD;AAxBI,GAAP;AA0BD,CA3BD;;AA4BA,MAAMC,aAAa,GAAGzC,OAAO,CAC3BG,eAD2B,EAE3BmB,kBAF2B,CAAP,CAGpBpB,IAHoB,CAAtB;AAKA,eAAeuC,aAAf","sourcesContent":["import { connect } from 'react-redux';\r\nimport * as actions from '../actions/actions';\r\nimport Game from '../components/game';\r\n\r\nconst mapStateToProps = state => {\r\n  const GameState = state.GameReducer;\r\n  const InfoState = state.LoginReducer;\r\n  return {\r\n    history: GameState.history,\r\n    stepNumber: GameState.stepNumber,\r\n    xIsNext: GameState.xIsNext,\r\n    col: GameState.col,\r\n    row: GameState.row,\r\n    Sortvalue: GameState.Sortvalue,\r\n    temp: GameState.temp,\r\n    winner: GameState.winner,\r\n    name: state.LoginReducer.name,\r\n    token: state.LoginReducer.token,\r\n    username: InfoState.username,\r\n    password: InfoState.password,\r\n    isInfo: GameState.isInfo\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleClick: (i, j) => {\r\n      dispatch(actions.boardClick(i, j));\r\n    },\r\n    jumpTo: step => {\r\n      dispatch(actions.goToMoveClick(step));\r\n    },\r\n    sortClick: () => {\r\n      dispatch(actions.sortClick());\r\n    },\r\n    calculateWinner: squares => {\r\n      dispatch(actions.checkWinner(squares));\r\n    },\r\n    Logout: () => {\r\n      dispatch(actions.LogOut());\r\n    },\r\n    Info: () => {\r\n      dispatch(actions.Info());\r\n    },\r\n    Login: (username, password) => {\r\n      dispatch(actions.loginRequest(username, password));\r\n    },\r\n    NoInfo: () => {\r\n      dispatch(actions.NoInfo());\r\n    }\r\n  };\r\n};\r\nconst GameContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Game);\r\n\r\nexport default GameContainer;\r\n"]},"metadata":{},"sourceType":"module"}